[
  [
    "/meta\n",
    "author: Robin Gruenke\n",
    "website: https://www.robingruenke.com\n",
    "year: 2020\n",
    "title: Journal - Generate Html Tool | robingruenke.com\n",
    "description: Generate static html flexible, approachable, consistent and with a custom format\n",
    "keywords: html text python generate tool\n",
    "topic: How my Journal is build\n",
    "prop: value:withcolon\n",
    "\n"
  ],
  [
    "/introduction\n",
    "\n",
    "For the purpose of starting my blog (I call it journal, because I will write in small chapters and it also serves as documentation),\n",
    "I want to generate static html without a server.\n",
    "I want a blend of: Clean approach, less boilerplate, simplicity, approachability, content validation,\n",
    "plain text, modularity and freedom for customizing.\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: TL;DR I created my own document format\n",
    "author: Robin Gruenke\n",
    "date: 23.03.2020\n",
    "picture: 250px /gallery/how-my-journal-is-build.jpeg\n",
    "appendix: [Document for this article] https://github.com/eimfach/eimfach.github.io/blob/robingruenke.com/journal/blogging/tools/how-my-journal-is-build.journal\n",
    "\n",
    "Writing my articles outside the scope of html and css rendering was important to me. I want to write plain text and decorate it with properties,\n",
    "which resemble certain reoccurring html components and meta information. So I created my own format for this. You can find a link to the document for this article\n",
    "in appendix.\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: Preface: What about Elm ?\n",
    "author: Robin Gruenke\n",
    "date: 07.03.2020\n",
    "appendix: [What is Elm ?] https://en.wikipedia.org/wiki/Elm_(programming_language)\n",
    "\n",
    "Because I am a big fan of Elm, my first thought was if it was a good choice for my purpose.\n",
    "I have a little bit experience with elm-static, which is an opinionated tool for creating static html for your website.\n",
    "It supports markdown and elm-markup. \n",
    "However, in my humble opinion it is structural very complex, has a lot of boilerplate and the modularity of the markdown files is somehow hard to see through.\n",
    "\n",
    "What about elm-markup ?\n",
    "\n",
    "I saw the introduction video of it, and I think it is a very great idea. It is so modular and extensible that you can create very rich\n",
    "custom formats for your static html. I was looking for it on github, but soon I realized, it is somewhat hard to start off with it, since\n",
    "there is no real introduction and documentation for it. I would spend a lot of time understanding it and getting things done, so dropped it from the list.\n",
    "However, maybe I will have a look later this year !\n",
    "\n",
    "Finally, I was thinking: What would be the elm way of doing it ?\n",
    "\n",
    "Elm could render static html in a very simple way, by just creating a main function and call the html functions you need.\n",
    "And it would bring all the power and modularity of elm with it. However, I was quite sure that the compiler couldn't generate plain html at all.\n",
    "\n",
    "This is how it looks:\n",
    "\n",
    "code:\n",
    "  module Test exposing (..)\n",
    "  import Html exposing (Html, div, h1, text)\n",
    "\n",
    "  main : Html Never\n",
    "  main =\n",
    "      div [] [ h1 [] [ text \"Hello World !\" ]  ]\n",
    ":code\n",
    "\n",
    "Cool, no boilerplate at all in the first place !\n",
    "\n",
    "When you compile it, you get a html document. However, there is no static html from your main function in it.\n",
    "It just seems so natural to me that it would generate static html, since the annotation line 'main : Html Never' tells us: \n",
    "I will render html without any Javascript Events guaranteed.\n",
    "Of course, in the end, I was expecting that. As of today, Elm can render html via its Javascript runtime only (It is a compile to js language).\n",
    "\n",
    "Maybe the addition of a built-in custom type like 'Static' could tell the compiler to just render html ? \n",
    "It would be just so simple and straight forward :)\n",
    "\n",
    "Summary:\n",
    "\n",
    "It seems like that Elm is not the appropriate tool (for now). I could generate pages just the way I mentioned\n",
    "earlier, however, the whole page would be rendered with javascript, which is not what I want (think of SEO).\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: Preface: And what about PHP ?\n",
    "author: Robin Gruenke\n",
    "date: 07.03.2020\n",
    "\n",
    "Yes, good old php. It comes with modular html rendering 'included'. That is what it was made for initially.\n",
    "I had my experience with it. It is great for starting a small project from scratch and you want to proceed fast.\n",
    "Until today it grew to has compelling OOP features. Also, leveraging existing html files to be dynamic is very easy.\n",
    "However, mixing plain html and php code is scaling badly, \n",
    "since maintaining readability is clearly not a 'built-in feature', in my opinion. \n",
    "It can quickly turn into a complete mess.\n",
    "\n",
    "In order to get a clean and fitting environment with php, I would need to research for appropriate tools.\n",
    "But the pool of my concerns are too inconstant.\n",
    "Do I need some sort of smart classes which handle rendering ?\n",
    "How could I dismiss writing mixed php and html ?\n",
    "Do I need some sort of framework ?\n",
    "Where can I find well written documentation ?\n",
    "Can I have PHP with a nice syntax ? (Python, you ?)\n",
    "\n",
    "I am sorry, PHP.\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: Indeed Python !\n",
    "author: Robin Gruenke\n",
    "date: 07.03.2020\n",
    "picture: 1000px https://imgs.xkcd.com/comics/python.png\n",
    "appendix: [Documentation for Yattag] https://www.yattag.org\n",
    "\n",
    "I was learning Python the last weeks. Somehow it caught my attention after years, and I thought: why did I never give it a try ? \n",
    "Sorry Python, that I never considered you before ! You are clearly awesome !\n",
    "\n",
    "Python just runs. It is very approachable and easy to learn.\n",
    "It has clever and unique idioms, straight forward data structures, \n",
    "outstanding libraries for a lot of use cases and on top, a very clean syntax.\n",
    "\n",
    "It is versatile.\n",
    "\n",
    "- Do you want to compute complex math with less code ? NumPy got your back.\n",
    "\n",
    "- Do you want to create a science application ? SciPy got your back.\n",
    "\n",
    "- Do you want to create interactive code documents ? IPython and Jupyter Notebooks got your back.\n",
    "\n",
    "- Want to compute math for neural networks on your GPU ? PyTorch has your back, just to mention one.\n",
    "\n",
    "- Data Science ? Python loves it.\n",
    "\n",
    "- Web Frameworks ? Django, Flask and more.\n",
    "\n",
    "Now: What about my need of html modularity and a simple and clean approach ? I would prefer not to write html documents but still be declarative.\n",
    "I also would prefer not to use some sort of dynamic template language.\n",
    "\n",
    "Luckily, Python has my back and I found a really interesting library for my purpose: Yattag.\n",
    "\n",
    "Yattag code is just plain Python which utilizes the 'with' statement:\n",
    "\n",
    "code:\n",
    "  from yattag import Doc, indent\n",
    "\n",
    "  doc, tag, text = Doc().tagtext()\n",
    "\n",
    "  with tag('html'):\n",
    "      with tag('body', id = 'hello'):\n",
    "          with tag('h1'):\n",
    "              text('Hello world!')\n",
    "\n",
    "  print(indent(doc.getvalue()))\n",
    ":code\n",
    "\n",
    "Result:\n",
    "\n",
    "code:\n",
    "  <html>\n",
    "    <body id=\"hello\">\n",
    "      <h1>Hello world!</h1>\n",
    "    </body>\n",
    "  </html>\n",
    ":code\n",
    "\n",
    "This way I could write my whole site in pure python.\n",
    "Clean, modular and declarative html generation there you go !\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: Still, I want to write my articles in plain text !\n",
    "author: Robin Gruenke\n",
    "date: 08.03.2020\n",
    "\n",
    "Okay, okay. Yes, I would still need to build rather complex and repetitive stacks of 'pythonic html' for each page. Reusability or not.\n",
    "Of course I will build up functions which resemble html components, that would be the modular part. But that is not sufficient.\n",
    "\n",
    "To recapture:\n",
    "\n",
    "I want a blend of: Clean approach, less boilerplate, simplicity, approachability, content validation, plain text, modularity and freedom for customizing.\n",
    "\n",
    "So what would be basically missing is content validation and plain text. \n",
    "I could extend my pythonic html with validator functions, to get the validation I need, or create a validation layer between the parsing and the rendering.\n",
    "But before all that, I want to write my articles in plain text.\n",
    "\n",
    "So I finally decided to create my own document format, which resembles a Journal Page with all its specific layout and styling.\n",
    "\n",
    "I want to write a parser that parses the document,\n",
    "validates for SEO best practices and enforces semantics in content\n",
    "(like a requirement for an introduction text, max length of content elements, required meta data or keyword occurrence). The reason I want to combine\n",
    "parsing and content validation is, so that I can reuse it for another project. Content semantics would be a feature of the document format.\n",
    "\n",
    "Each Page will have the exact same structure and basic elements. Creating an abstract format,\n",
    "while letting python handle the parsing, while letting the parsing handle the content validation, \n",
    "while letting yattag assemble the html from the parsing results, would be a nice separation of concerns. Phew !\n",
    "\n",
    "As an aside, you can see (maybe you were thinking about it already), the very known markdown format would not be enough for this.\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: How does the format look like ?\n",
    "author: Robin Gruenke\n",
    "date: 09.03.2020\n",
    "appendix: [View the implementation of the Parser] https://github.com/eimfach/eimfach.github.io/blob/robingruenke.com/journal.py\n",
    "\n",
    "At first I describe the meta data for the document:\n",
    "\n",
    "code:\n",
    "  /meta\n",
    "  author: Robin Gruenke\n",
    "  website: https://www.robingruenke.com\n",
    "  year: 2020\n",
    "  title: Journal - Tools | robingruenke.com\n",
    "  description: Generate static html flexible, approachable, consistent and with a custom format\n",
    "  keywords: journal generate html python elm\n",
    "  topic: How my Journal is build\n",
    ":code\n",
    "\n",
    "- Semantic blocks are annotated with a slash like /meta\n",
    "\n",
    "- The meta properties are expected in this exact order, in those exact lines, to enforce consistency across multiple pages.\n",
    "\n",
    "- author: Requires exactly two latin character words separated by a space. This author is the owner of the journal topic.\n",
    "Any following author properties are just so that multiple authors can write on a single document. Like for guest chapters.\n",
    "\n",
    "- website: The journal topic owners website\n",
    "\n",
    "- year: Requires a four digit year.\n",
    "\n",
    "- title: Requires three words with the given special characters and spaces\n",
    "\n",
    "- description: Requires exactly 50 to 160 characters\n",
    "\n",
    "- keywords: Requires exactly 5 latin words\n",
    "\n",
    "- topic: Can be any characters up to a length of 50 characters\n",
    "\n",
    "Then there is the /introduction block. It is required to have it in the document including the following plain text,\n",
    "which must be between 50 and 300 characters, not counting spaces, and it must be surrounded with two line breaks.\n",
    "\n",
    "code:\n",
    "  /introduction\n",
    "\n",
    "  For the purpose of starting my blog (I call it journal, because I will write in small chapters),\n",
    "  I want to generate static html without a server.\n",
    "  I want a blend of: Clean approach, less boilerplate, simplicity, approachability,content validation,\n",
    "  plain text, modularity and freedom for customizing.\n",
    "\n",
    ":code\n",
    "\n",
    "For every chapter there is a /chapter block. It also requires to set at least topic, author and a date. The date is in german format (dd.mm.yyyy).\n",
    "Optionally you can set a picture, which consists of two space separated values: a (css compatible)\n",
    "height value and the link itself. Then, there is the plain text for the chapter, it is just free texting, with unlimited paragraphs.\n",
    "Just separate them by two new lines. They will be wrapped in p tags later on. Plus, leading dash characters are auto magically, \n",
    "fancily transformed into a unicode dot character.\n",
    "\n",
    "code:\n",
    "  /chapter\n",
    "  topic: Indeed Python !\n",
    "  author: Robin Gruenke\n",
    "  date: 07.03.2020\n",
    "  picture: 1000px https://imgs.xkcd.com/comics/python.png\n",
    "\n",
    "  I am a paragraph\n",
    "\n",
    "  Another paragraph\n",
    ":code\n",
    "\n",
    "And that's basically it.\n",
    "\n",
    "Ah yes, not to forget, there are these code blocks on this page which looks like this: (I had to escape them, a code block starts with code: and ends with :code)\n",
    "\n",
    "code:\n",
    "  \\code:\n",
    "  <html>\n",
    "    <body id=\"hello\">\n",
    "      <h1>Hello world!</h1>\n",
    "    </body>\n",
    "  </html>\n",
    "  \\:code\n",
    ":code\n",
    "\n",
    "Code blocks may only occur in chapter blocks in between paragraphs.\n",
    "\n",
    "- Finally, a single line of at least three dashes (---) stops the parsing. It has come to an area in the document, which is just for happily and freely drafting around :)\n",
    "\n",
    "What I want to add further: \n",
    "\n",
    "- [x] A chapter appendix with one hyperlink (use 'appendix: [description] hyperlink')\n",
    "\n",
    "- [x] One markdown style inline hyperlink at the end of an introtext. I think this should be the only place in the document for an inline hyperlink,\n",
    "because I think they are distracting from text content. This is not covered by the journal parser however. It is part of the html components.\n",
    "\n",
    "- [x] Gallery support (use 'gallery: 75px (path) (path) (path)', picture attribute is required)\n",
    "\n",
    "- [x] Quotes for chapters (use 'quote: [description] [quotetext] [hyperlink]')\n",
    "\n",
    "- [x] Checkbox support for paragraphs beginning with '- [ ]' or '- [x]'. This is also covered by the html components.\n",
    "\n",
    "- Maybe some emphasizing stuff.\n",
    "I am not too much of a fan of bold or underlined words in texts, however. I think it is distracting from the content.\n",
    "Maybe some italic stuff. I like Italy !\n",
    "\n",
    "- [x] Also, some small uncritical parser bugs have to be fixed.\n",
    "\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: How does the Parser output look like ?\n",
    "author: Robin Gruenke\n",
    "date: 10.03.2020\n",
    "appendix: [What is a Dictionary ?] https://en.wikibooks.org/wiki/A-level_Computing/AQA/Paper_1/Fundamentals_of_data_structures/Dictionaries\n",
    "\n",
    "The parser output is a Python Dictionary with the following keys and its value types (Key : Type) :\n",
    "\n",
    "code:\n",
    "  -- document root structure\n",
    "  author : String\n",
    "  owner-website : String\n",
    "  year : String\n",
    "  title : String\n",
    "  description : String\n",
    "  keywords : String\n",
    "  topic : String\n",
    "  introtext : String\n",
    "  chapters : List Dictionary\n",
    ":code\n",
    "\n",
    "The 'chapters' value is a List of Dictionaries, where each Dictionary resembles a /chapter block in the document.\n",
    "A chapter Dictionary has the following keys:\n",
    "\n",
    "code:\n",
    "  -- Chapter structure\n",
    "  topic : String\n",
    "  author : String\n",
    "  date : String\n",
    "  appendix : Dictionary { 'href' : String, 'description' : String }\n",
    "  picture : Dictionary { 'src' : String, 'height' : String }\n",
    "  paragraphs : List Dictionary\n",
    ":code\n",
    "\n",
    "The 'paragraphs' value is a List of Dictionaries, where each Dictionary resembles a line break separated text block in the chapter, be it just a text block or a code block.\n",
    "Therefore two properties are in a paragraph Dictionary: type and content. Type stands for text or code block, the content is just the actual text from the document.\n",
    "\n",
    "code:\n",
    "  -- Paragraph structure\n",
    "  type : String\n",
    "  content : String\n",
    ":code\n",
    "\n",
    "Here an overview of the output converted to JSON:\n",
    "\n",
    "code:\n",
    "  {\n",
    "      \"author\": \"Robin Gruenke\",\n",
    "      \"owner-website\": \"https:\\/\\/www.robingruenke.com\",\n",
    "      \"year\": \"2020\",\n",
    "      \"title\": \"Journal - Tools | robingruenke.com\",\n",
    "      \"description\": \"Generate static html flexible, approachable, consistent and with a custom format\",\n",
    "      \"keywords\": \"journal generate html python elm\",\n",
    "      \"topic\": \"How my Journal is build\",\n",
    "      \"introtext\": \"For the purpose of starting my blog (I call it journal, because I will write in small chapters), I want to generate static html without a server. I want a blend of: Clean approach, less boilerplate, simplicity, approachability, content validation, plain text, modularity and freedom for customizing. \",\n",
    "      \"chapters\": [\n",
    "          {\n",
    "              \"topic\": \"How does the parser output look like ?\",\n",
    "              \"author\": \"Robin Gruenke\",\n",
    "              \"date\": \"10.03.2020\",\n",
    "              \"paragraphs\": [\n",
    "                  {\n",
    "                      \"type\": \"text\",\n",
    "                      \"content\": \"I am a Paragraph\"\n",
    "                  },\n",
    "                  {\n",
    "                      \"type\": \"code\",\n",
    "                      \"content\": \"I am a Paragraph\"\n",
    "                  }\n",
    "              ]\n",
    "          }\n",
    "      ]\n",
    "  }\n",
    ":code\n",
    "\n"
  ],
  [
    "/chapter\n",
    "topic: A simple picture Gallery\n",
    "author: Robin Gruenke\n",
    "date: 12.03.2020\n",
    "picture: 250px https://source.unsplash.com/daily?mountain\n",
    "gallery: 75px (https://source.unsplash.com/daily?water) (https://source.unsplash.com/daily?river) (https://source.unsplash.com/daily?forest) (https://source.unsplash.com/daily?lake) (https://source.unsplash.com/daily?plant) (https://source.unsplash.com/daily?sea)\n",
    "appendix: [Pictures are from unsplash.com] https://unsplash.com\n",
    "\n",
    "I wanted to have a simple possibility to inject a Gallery into my journals. So I introduced a new attribute for chapters, 'gallery'.\n",
    "It looks like this:\n",
    "\n",
    "code:\n",
    "  gallery: 50px (/gallery/photo1.jpeg) (/gallery/photo2.jpeg) (/gallery/photo3.jpeg)\n",
    ":code\n",
    "\n",
    "- The first value is required and is a css compatible height.\n",
    "The height will apply on the thumbnails of the Gallery component. This way you can influence the thumbnail appearance.\n",
    "\n",
    "- After this you can insert as many picture paths you want, as long as they are wrapped in parenthesis. They will be shown as rows of three.\n",
    "Also, you have to specify a file type from the ones which are supported: png | jpg | jpeg.\n",
    "Generic urls are not supported as of now.\n",
    "\n",
    "- Galleries also require to set a picture attribute. It will blend together and create a gallery component.\n",
    "The height value of the picture attribute determines how large the pictures in the gallery can scale.\n",
    "\n",
    "- The client side javascript for the gallery interactivity is very minimal (It just swaps out thumbnail image and main image):\n",
    "\n",
    "code:\n",
    "  (function GalleryModule(){\n",
    "    document.querySelectorAll('.gallery-background').forEach(function(topEl){\n",
    "      var mainImage = topEl.querySelector('.main-image');\n",
    "\n",
    "      topEl.querySelectorAll('.gallery-picture').forEach(function(img){\n",
    "\n",
    "        img.onclick = function() {\n",
    "          var imgSrc = img.getAttribute('src')\n",
    "          var mainImageSrc = mainImage.getAttribute('src')\n",
    "          \n",
    "          img.setAttribute('src', mainImageSrc)\n",
    "          mainImage.setAttribute('src', imgSrc)\n",
    "        }\n",
    "      });\n",
    "\n",
    "    });\n",
    "  })();\n",
    ":code\n",
    "\n",
    "\n"
  ]
]